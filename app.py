"""
Glucose Monitoring App - Simple and Private
Your data stays in your Google Drive
Based on ADA 2025 Guidelines
"""

import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import plotly.graph_objects as go
import gspread
from google.oauth2 import service_account
from google_auth_oauthlib.flow import Flow
import json
import os
import base64

# Page configuration - this makes our app look good on phones
st.set_page_config(
    page_title="Monitor Glicemie",
    page_icon="ü©∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state - this is like the app's memory
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
    st.session_state.user_email = None
    st.session_state.credentials = None
    st.session_state.sheet = None

# Google OAuth settings
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 
          'https://www.googleapis.com/auth/drive.file',
          'https://www.googleapis.com/auth/userinfo.email']

def init_oauth_flow():
    """
    Initialize the OAuth flow with proper configuration
    This is like setting up the proper entrance to the building
    """
    client_config = {
        "web": {
            "client_id": st.secrets.google.client_id,
            "client_secret": st.secrets.google.client_secret,
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "redirect_uris": [st.secrets.google.redirect_uri]
        }
    }
    
    flow = Flow.from_client_config(
        client_config,
        scopes=SCOPES,
        redirect_uri=st.secrets.google.redirect_uri
    )
    
    return flow

def check_authentication():
    """
    Check if user is coming back from Google login
    Like checking if someone has a valid entrance ticket
    """
    # Look for the authorization code in the URL
    query_params = st.query_params
    
    if "code" in query_params:
        # User is coming back from Google with authorization
        try:
            flow = init_oauth_flow()
            
            # Exchange the authorization code for credentials
            flow.fetch_token(code=query_params["code"])
            
            # Get the credentials
            credentials = flow.credentials
            
            # Save to session state
            st.session_state.authenticated = True
            st.session_state.credentials = credentials
            
            # Get user email
            from google.auth.transport.requests import Request
            from google.oauth2 import id_token
            import requests
            
            # Get user info
            user_info_service = requests.get(
                'https://www.googleapis.com/oauth2/v1/userinfo',
                headers={'Authorization': f'Bearer {credentials.token}'}
            ).json()
            
            st.session_state.user_email = user_info_service.get('email', 'Utilizator')
            
            # Clear the code from URL to clean things up
            st.query_params.clear()
            
            # Initialize Google Sheets connection
            init_google_sheets()
            
            return True
            
        except Exception as e:
            st.error(f"Eroare la autentificare: {str(e)}")
            st.stop()
    
    return False

def init_google_sheets():
    """
    Initialize connection to Google Sheets
    Like opening your personal notebook
    """
    try:
        # Create credentials object for gspread
        import google.auth
        from google.oauth2.credentials import Credentials
        
        creds = st.session_state.credentials
        
        # Initialize gspread client
        import gspread
        client = gspread.authorize(creds)
        
        # Try to open existing spreadsheet or create new one
        try:
            spreadsheet = client.open("Monitor Glicemie - Date Personale")
        except gspread.SpreadsheetNotFound:
            # Create new spreadsheet
            spreadsheet = client.create("Monitor Glicemie - Date Personale")
            
            # Set up the initial worksheet
            worksheet = spreadsheet.sheet1
            worksheet.update('A1:G1', [['Data', 'Ora', 'Valoare', 'Tip MƒÉsurare', 'Feedback', 'Ton', 'Note']])
            
            # Format headers
            worksheet.format('A1:G1', {
                "backgroundColor": {"red": 0.2, "green": 0.5, "blue": 0.9},
                "textFormat": {"foregroundColor": {"red": 1, "green": 1, "blue": 1}, "bold": True}
            })
        
        st.session_state.sheet = spreadsheet
        
    except Exception as e:
        st.error(f"Eroare la conectarea cu Google Sheets: {str(e)}")

def get_feedback(value, measurement_type):
    """
    Provide feedback based on ADA 2025 guidelines
    This is like a traffic light system for your glucose values
    """
    
    # Check for dangerous low blood sugar first
    if value < 70:
        return ("‚ö†Ô∏è Hipoglicemie! ConsumƒÉ imediat 15g carbohidra»õi rapizi. "
                "VerificƒÉ din nou √Æn 15 minute.", "urgent")
    
    # Check for dangerous high blood sugar
    if value > 250:
        return ("üö® Hiperglicemie severƒÉ! Bea apƒÉ »ôi contacteazƒÉ medicul "
                "dacƒÉ nu scade √Æn 2 ore.", "urgent")
    
    # Different rules for different measurement types
    if measurement_type == "Pe nem√¢ncate":
        if value <= 99:
            return ("‚úÖ Control glicemic excelent! ContinuƒÉ a»ôa!", "good")
        elif value <= 125:
            return ("‚ö†Ô∏è Valoare la limitƒÉ. Aten»õie la dietƒÉ »ôi mi»ôcare.", "warning")
        else:
            return ("üî¥ Glicemie crescutƒÉ. ConsultƒÉ medicul pentru ajustƒÉri.", "alert")
    
    elif measurement_type == "DupƒÉ masƒÉ (2 ore)":
        if value < 140:
            return ("‚úÖ Excelent! Masa a fost bine toleratƒÉ.", "good")
        elif value < 180:
            return ("üëç √én limite acceptabile.", "neutral")
        else:
            return ("üî¥ Prea mare dupƒÉ masƒÉ. Redu carbohidra»õii.", "alert")
    
    else:  # Random check
        if value < 140:
            return ("Valoare normalƒÉ.", "neutral")
        else:
            return ("‚ö†Ô∏è Valoare crescutƒÉ. MonitorizeazƒÉ mai atent.", "warning")

def save_glucose_reading(value, measurement_type, notes=""):
    """
    Save a glucose reading to Google Sheets
    Like writing a new entry in your diary
    """
    timestamp = datetime.now()
    feedback, tone = get_feedback(value, measurement_type)
    
    # Create the data record
    record = [
        timestamp.strftime("%Y-%m-%d"),
        timestamp.strftime("%H:%M"),
        value,
        measurement_type,
        feedback,
        tone,
        notes
    ]
    
    # Save to Google Sheets
    try:
        worksheet = st.session_state.sheet.sheet1
        worksheet.append_row(record)
        return feedback, tone
    except Exception as e:
        st.error(f"Eroare la salvarea datelor: {str(e)}")
        return feedback, tone

def get_all_readings():
    """
    Get all readings from Google Sheets
    Like reading all entries from your diary
    """
    try:
        worksheet = st.session_state.sheet.sheet1
        data = worksheet.get_all_records()
        return pd.DataFrame(data)
    except:
        return pd.DataFrame()

def main():
    """
    Main application logic
    This is where everything comes together
    """
    
    # Check if user is returning from authentication
    check_authentication()
    
    # Title and description
    st.title("ü©∏ Monitor Glicemie")
    st.markdown("*√énregistreazƒÉ »ôi √Æn»õelege valorile glicemiei tale*")
    
    # Check if user is authenticated
    if not st.session_state.authenticated:
        st.markdown("""
        ### Bine ai venit! 
        
        AceastƒÉ aplica»õie te ajutƒÉ sƒÉ:
        - üìä √énregistrezi valorile glicemiei
        - üí° √én»õelegi ce √ÆnseamnƒÉ fiecare valoare
        - üìà Vezi tendin»õele √Æn timp
        - üîí PƒÉstrezi datele private √Æn Google Drive
        
        **Cum func»õioneazƒÉ confiden»õialitatea?**
        
        Datele tale sunt salvate √Æntr-o foaie Google Sheets privatƒÉ √Æn contul tƒÉu.
        Nimeni altcineva nu le poate vedea - nici mƒÉcar noi! Este ca »ôi cum ai 
        avea un carne»õel personal √Æn seiful tƒÉu Google.
        """)
        
        # Create the login button with better handling
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.markdown("### Pentru a √Æncepe:")
            
            # Initialize OAuth flow
            flow = init_oauth_flow()
            
            # Generate authorization URL
            auth_url, _ = flow.authorization_url(
                access_type='offline',
                include_granted_scopes='true',
                prompt='consent'
            )
            
            # Create a nice button that opens in new tab
            st.markdown(
                f"""
                <div style="text-align: center; padding: 20px;">
                    <a href="{auth_url}" target="_blank" style="
                        display: inline-block;
                        padding: 12px 24px;
                        background-color: #4285f4;
                        color: white;
                        text-decoration: none;
                        border-radius: 4px;
                        font-weight: bold;
                        font-size: 16px;
                    ">
                        üîê ConecteazƒÉ-te cu Google
                    </a>
                </div>
                """,
                unsafe_allow_html=True
            )
            
            st.info("üí° **Sfat:** DupƒÉ ce te autentifici cu Google, vei fi redirec»õionat √Ænapoi aici automat.")
        
        return
    
    # Sidebar for navigation
    with st.sidebar:
        st.markdown(f"### üë§ {st.session_state.user_email}")
        
        page = st.radio(
            "Navigare",
            ["üìù AdaugƒÉ Citire", "üìä Istoric", "üìà Tendin»õe", "‚öôÔ∏è SetƒÉri"],
            label_visibility="collapsed"
        )
        
        if st.button("üö™ Deconectare"):
            st.session_state.authenticated = False
            st.session_state.credentials = None
            st.session_state.sheet = None
            st.query_params.clear()
            st.rerun()
    
    # Main content based on selected page
    if page == "üìù AdaugƒÉ Citire":
        show_add_reading_page()
    elif page == "üìä Istoric":
        show_history_page()
    elif page == "üìà Tendin»õe":
        show_trends_page()
    elif page == "‚öôÔ∏è SetƒÉri":
        show_settings_page()

def show_add_reading_page():
    """
    Page for adding new glucose readings
    Like filling out a simple form
    """
    st.header("üìù AdaugƒÉ Citire NouƒÉ")
    
    # Create the form
    with st.form("glucose_reading"):
        col1, col2 = st.columns(2)
        
        with col1:
            value = st.number_input(
                "Valoare Glicemie (mg/dL)",
                min_value=20,
                max_value=600,
                value=100,
                step=1,
                help="Introdu valoarea afi»ôatƒÉ de glucometru"
            )
            
            measurement_type = st.selectbox(
                "C√¢nd ai mƒÉsurat?",
                ["Pe nem√¢ncate", "DupƒÉ masƒÉ (2 ore)", "Verificare aleatorie"],
                help="Alege momentul mƒÉsurƒÉrii pentru interpretare corectƒÉ"
            )
        
        with col2:
            measurement_time = st.time_input(
                "Ora mƒÉsurƒÉrii",
                value=datetime.now().time(),
                help="Ora exactƒÉ c√¢nd ai fƒÉcut mƒÉsurarea"
            )
            
            notes = st.text_area(
                "Note (op»õional)",
                placeholder="Ex: DupƒÉ alergare, am m√¢ncat mai mult la cinƒÉ, etc.",
                height=100
            )
        
        # Submit button
        submitted = st.form_submit_button("üíæ SalveazƒÉ", type="primary", use_container_width=True)
        
        if submitted:
            # Save the reading
            feedback, tone = save_glucose_reading(value, measurement_type, notes)
            
            # Show feedback with appropriate styling
            if tone == "good":
                st.success(feedback)
            elif tone == "warning":
                st.warning(feedback)
            elif tone == "alert" or tone == "urgent":
                st.error(feedback)
            else:
                st.info(feedback)
            
            # Add encouraging message
            st.markdown("---")
            st.markdown("‚úÖ **Citire salvatƒÉ cu succes √Æn Google Sheets!**")

def show_history_page():
    """
    Show historical glucose readings
    Like looking through your diary entries
    """
    st.header("üìä Istoric Citiri")
    
    # Get data from Google Sheets
    df = get_all_readings()
    
    if df.empty:
        st.info("Nu ai √ÆncƒÉ citiri salvate. AdaugƒÉ prima ta citire!")
        return
    
    # Convert Valoare column to numeric
    df['Valoare'] = pd.to_numeric(df['Valoare'], errors='coerce')
    
    # Display summary statistics
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total Citiri", len(df))
    with col2:
        st.metric("Media GeneralƒÉ", f"{df['Valoare'].mean():.0f} mg/dL")
    with col3:
        good_readings = len(df[df['Ton'] == 'good'])
        percentage = (good_readings / len(df)) * 100 if len(df) > 0 else 0
        st.metric("√én Limite Normale", f"{percentage:.0f}%")
    
    # Show the readings table
    st.markdown("### Citiri Recente")
    
    # Sort by date and time (most recent first)
    try:
        df['DateTime'] = pd.to_datetime(df['Data'] + ' ' + df['Ora'])
        df = df.sort_values('DateTime', ascending=False)
    except:
        pass
    
    # Display the data
    display_df = df[['Data', 'Ora', 'Valoare', 'Tip MƒÉsurare', 'Feedback', 'Note']].copy()
    
    st.dataframe(
        display_df,
        use_container_width=True,
        hide_index=True,
        column_config={
            "Valoare": st.column_config.NumberColumn(
                "Valoare (mg/dL)",
                format="%d"
            ),
            "Feedback": st.column_config.TextColumn(
                "Interpretare",
                width="large"
            )
        }
    )

def show_trends_page():
    """
    Show glucose trends over time
    Like looking at a graph of your progress
    """
    st.header("üìà Tendin»õe")
    
    # Get data from Google Sheets
    df = get_all_readings()
    
    if df.empty or len(df) < 2:
        st.info("Ai nevoie de cel pu»õin c√¢teva citiri pentru a vedea tendin»õe.")
        return
    
    # Prepare data
    df['Valoare'] = pd.to_numeric(df['Valoare'], errors='coerce')
    df['DateTime'] = pd.to_datetime(df['Data'] + ' ' + df['Ora'])
    
    # Create a simple line chart
    fig = go.Figure()
    
    # Add glucose values line
    fig.add_trace(go.Scatter(
        x=df['DateTime'],
        y=df['Valoare'],
        mode='lines+markers',
        name='Glicemie',
        line=dict(color='blue', width=2),
        marker=dict(size=8)
    ))
    
    # Add target ranges as background
    fig.add_hrect(y0=70, y1=130, fillcolor="green", opacity=0.1, 
                  annotation_text="»öintƒÉ pe nem√¢ncate", annotation_position="right")
    fig.add_hrect(y0=0, y1=70, fillcolor="red", opacity=0.1,
                  annotation_text="Hipoglicemie", annotation_position="right")
    fig.add_hrect(y0=180, y1=600, fillcolor="orange", opacity=0.1,
                  annotation_text="Hiperglicemie", annotation_position="right")
    
    fig.update_layout(
        title="Evolu»õia Glicemiei",
        xaxis_title="Data »ôi Ora",
        yaxis_title="Glicemie (mg/dL)",
        hovermode='x unified',
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Show pattern analysis
    st.markdown("### Analiza Pattern-urilor")
    
    # Group by measurement type
    avg_by_type = df.groupby('Tip MƒÉsurare')['Valoare'].mean()
    
    cols = st.columns(len(avg_by_type))
    for i, (measure_type, avg_value) in enumerate(avg_by_type.items()):
        with cols[i]:
            st.metric(f"Media {measure_type}", f"{avg_value:.0f} mg/dL")

def show_settings_page():
    """
    Settings page for user preferences
    Like adjusting the settings on your phone
    """
    st.header("‚öôÔ∏è SetƒÉri")
    
    st.markdown("### Despre Aplica»õie")
    st.info("""
    **Monitor Glicemie v1.0**
    
    AceastƒÉ aplica»õie folose»ôte ghidurile American Diabetes Association (ADA) 2025
    pentru a interpreta valorile glicemiei tale.
    
    Toate datele sunt stocate √Æn contul tƒÉu Google Drive personal.
    Aplica»õia nu colecteazƒÉ »ôi nu transmite date cƒÉtre ter»õi.
    """)
    
    st.markdown("### Export Date")
    if st.button("üì• DescarcƒÉ datele √Æn format CSV"):
        df = get_all_readings()
        if not df.empty:
            csv = df.to_csv(index=False)
            st.download_button(
                label="üíæ SalveazƒÉ CSV",
                data=csv,
                file_name=f"glicemie_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv"
            )
    
    st.markdown("### Foaia ta Google Sheets")
    if st.session_state.sheet:
        sheet_url = st.session_state.sheet.url
        st.markdown(f"üìä [Deschide foaia de calcul direct]({sheet_url})")
        st.info("Po»õi edita direct √Æn Google Sheets dacƒÉ dore»ôti. Aplica»õia va citi automat modificƒÉrile.")
    
    st.markdown("### »öinte Personalizate")
    st.info("√én dezvoltare: Posibilitatea de a seta »õinte personalizate conform recomandƒÉrilor medicului tƒÉu.")

# Run the app
if __name__ == "__main__":
    main()
